// Time: O(n) = 16 minutes.
#ifndef GRAPH_H
#define GRAPH_H
#include <utility>
#include <vector>
#include <climits>
#include <tuple>
#include <string>
#include <unordered_map>
#include <algorithm>
#include <unordered_set>
#include <string>
#include <exception>
#include <iostream>
#include <sstream>
#include <queue>
#include <stack>
#include "MinPriorityQueue.hpp"

#include "disjointsets.hpp"

using namespace std;

const int INFINIT_COST = INT_MAX;

template <class T>
string toString(const T& value) //used for DFS
{
	ostringstream oss;
	oss << value;
	return oss.str();
}

template <class T>
class Graph
{
private:
	// for you decide
	class Edge
	{
	public:
		T fromVertex;
		T toVertex;
		int weight;
		Edge() {}
		Edge(T from, T to, int weight = 0) : fromVertex(from), toVertex(to), weight(weight) {}
		bool operator<(const Edge& other) const
		{
			return weight < other.weight;
		}
		bool operator>(const Edge& other) const
		{
			return weight > other.weight;
		}
		bool operator==(const Edge& other) const
		{
			return weight == other.weight && other.fromVertex == fromVertex && other.toVertex == toVertex;
		}
		bool operator!=(const Edge& other) const
		{
			return weight != other.weight || other.fromVertex != fromVertex || other.toVertex != toVertex; // Ã¤ven vikt
		}
		bool operator<=(const Edge& other) const
		{
			return weight <= other.weight;
		}
		bool operator>=(const Edge& other) const
		{
			return weight >= other.weight;
		}
	};

	unordered_map<T, int> vertexMap;
	vector<vector<Edge>> adjList;


	string res;
	unordered_map<T, bool> visited;
	void dfs(T v) { //recursive better (the less code, the better)
		visited[v] = true;
		if (!res.empty()) res += ",";
		res += toString(v);

		auto& edges = adjList[vertexMap[v]];
		sort(edges.begin(), edges.end(), [](const Edge& a, const Edge& b) { return a.toVertex < b.toVertex; });

		for (Edge& e : adjList[vertexMap[v]]) {
			if (!visited[e.toVertex]) {
				dfs(e.toVertex);
			}
		}
	}

public:
	Graph();
	virtual ~Graph() = default;
	Graph(const Graph& other) = delete;
	Graph& operator=(const Graph& other) = delete;
	void addVertex(T theNode);
	void addEdge(T from, T to, int weight = 0);
	vector<T> getAllNeighboursTo(T vertex);
	int getNrOfVerticies() const;
	int getNrOfEdges() const;
	void kruskals(vector<tuple<T, T, int>>& mst, int& totalCost);
	void prims(vector<tuple<T, T, int>>& mst, int& totalCost);

	string depthFirstSearch(T from);
	string breadthFirstSearch(T from);
};

template<class T>
inline Graph<T>::Graph()
{
}

template<class T>
inline void Graph<T>::addVertex(T theNode)
{
	if (vertexMap.count(theNode) > 0)
		throw exception("Exception");
	vertexMap[theNode] = (int)vertexMap.size();
	adjList.push_back(vector<Edge>());
}
template<class T>
inline void Graph<T>::addEdge(T from, T to, int weight)
{
	if (vertexMap.count(from) == 0)
		addVertex(from);

	if (vertexMap.count(to) == 0)
		addVertex(to);

	adjList[vertexMap[from]].push_back(Edge(from, to, weight));
	adjList[vertexMap[to]].push_back(Edge(to, from, weight));
}

template<class T>
inline vector<T> Graph<T>::getAllNeighboursTo(T vertex)
{
	vector<T> neighbours;
	for (int i = 0; i < adjList[vertexMap[vertex]].size(); i++)
	{
		neighbours.push_back(adjList[vertexMap[vertex]][i].toVertex);
	}
	sort(neighbours.begin(), neighbours.end());
	return neighbours;
}

template<class T>
inline void Graph<T>::kruskals(vector<tuple<T, T, int>>& mst, int& totalCost)
{
	DisjointSets<T> disjointSets;
	vector<Edge> allEdges;

	for (int i = 0; i < adjList.size(); i++)
	{
		vector<Edge> currentVect = adjList[i];
		disjointSets.makeSet(currentVect[0].fromVertex);
		for (int j = 0; j < adjList[i].size(); j++)
		{
			allEdges.push_back(currentVect[j]);

		}
	}
	sort(allEdges.begin(), allEdges.end());

	int nrOfVertices = adjList.size();
	int currentNrOfEdgesInMST = 0;
	int index = 0;
	while (currentNrOfEdgesInMST < nrOfVertices - 1) {
		Edge currentEdge = allEdges[index++];
		if (disjointSets.findSet(currentEdge.fromVertex) != disjointSets.findSet(currentEdge.toVertex))
		{
			disjointSets.unionSet(currentEdge.fromVertex, currentEdge.toVertex);
			mst.push_back(make_tuple(currentEdge.fromVertex, currentEdge.toVertex, currentEdge.weight));
			totalCost += currentEdge.weight;
			currentNrOfEdgesInMST++;
		}
	}

}

template<class T>
inline void Graph<T>::prims(vector<tuple<T, T, int>>& mst, int& totalCost)
{
	totalCost = 0;

	MinPriorityQueue<Edge> pq;
	std::vector<bool> visited(adjList.size(), false);

	visited[0] = true;
	for (int i = 0; i < adjList[0].size(); i++)
	{
		pq.enqueue(adjList[0][i]);
	}

	while (!pq.is_empty())
	{
		Edge e = pq.dequeue();
		if (!visited[vertexMap[e.toVertex]])
		{
			visited[vertexMap[e.toVertex]] = true;
			mst.push_back(std::make_tuple(e.fromVertex, e.toVertex, e.weight));
			totalCost += e.weight;
			for (int i = 0; i < adjList[vertexMap[e.toVertex]].size(); i++)
			{
				pq.enqueue(adjList[vertexMap[e.toVertex]][i]);
			}
		}
	}
}

template<class T>
inline int Graph<T>::getNrOfVerticies() const
{
	return adjList.size();
}

template<class T>
inline int Graph<T>::getNrOfEdges() const
{
	int n = 0;
	for (int i = 0; i < adjList.size(); i++)
	{
		n += adjList[i].size();
	}
	return n;
}

template <class T>
string Graph<T>::depthFirstSearch(T from)
{
	/*string visited = "";
	stack<T> stack;
	unordered_set<T> visitedSet;

	stack.push(from);

	while (!stack.empty())
	{
		T current = stack.top();
		stack.pop();

		if (visitedSet.find(current) == visitedSet.end())
		{
			visitedSet.insert(current);
			if (!visited.empty()) {
				visited += ",";
			}
			visited += current;

			vector<T> neighbors = getAllNeighboursTo(current);

			reverse(neighbors.begin(), neighbors.end());

			for (T neighbor : neighbors)
			{
				if (visitedSet.find(neighbor) == visitedSet.end())
				{
					stack.push(neighbor);
				}
			}
		}
	}

	return visited;*/
	for (auto& pair : visited)
		visited[pair.first] = false;
	res.clear();
	dfs(from);
	return res;
}
template <class T>
string Graph<T>::breadthFirstSearch(T from)
{
	string visited = "";
	queue<T> queue;
	unordered_map<T, bool> visitedMap;

	queue.push(from);
	visitedMap[from] = true;

	while (!queue.empty())
	{
		T current = queue.front();
		queue.pop();

		visited += current;
		visited += ",";

		vector<T> neighbors = getAllNeighboursTo(current);

		for (T neighbor : neighbors)
		{
			if (!visitedMap[neighbor])
			{
				visitedMap[neighbor] = true;
				queue.push(neighbor);
			}
		}
	}

	if (!visited.empty())
		visited.pop_back();

	return visited;
}

#endif
